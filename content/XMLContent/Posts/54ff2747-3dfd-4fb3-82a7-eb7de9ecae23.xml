<?xml version="1.0" encoding="utf-8"?>
<post>
  <title>Cache-busting in C# without querystrings</title>
  <slug>cache-busting-in-c-without-querystrings</slug>
  <author></author>
  <pubDate>2014-07-14 21:38:20</pubDate>
  <lastModified>2015-05-21 18:19:40</lastModified>
  <content>&lt;p&gt;A key benefit of working with the web &lt;em&gt;(or more specifically http)&lt;/em&gt; is it’s native ability to &lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html" target="_blank"&gt;cache&lt;/a&gt;.&amp;nbsp; This can be ‘tuned’ to make websites extremely fast and slick, especially after initial page load.&lt;/p&gt; &lt;p&gt;The simplest example could be a file &lt;em&gt;(be it css, JavaScript or even a jpeg image)&lt;/em&gt; that once downloaded to a user’s device, will remain stored on that device ‘locally’ ensuring each subsequent request for this &lt;em&gt;same&lt;/em&gt; file, no longer needs to be re-downloaded.&amp;nbsp; Indeed, the file could remain on the device until a pre-defined expiry date, or until the user clears their local temporary internet files etc.&lt;/p&gt; &lt;p&gt;In addition, if you use a popular &lt;a href="http://en.wikipedia.org/wiki/Content_delivery_network" target="_blank"&gt;CDN&lt;/a&gt; to serve up common files&lt;em&gt; (e.g. &lt;/em&gt;&lt;a href="https://developers.google.com/speed/libraries/devguide#jquery" target="_blank"&gt;&lt;em&gt;jQuery&lt;/em&gt;&lt;/a&gt;&lt;em&gt; etc)&lt;/em&gt; then you could benefit from a user &lt;em&gt;&lt;u&gt;already&lt;/u&gt;&lt;/em&gt; having that file in their local cache, from another website; thus your site appears faster, thanks to this file having already being downloaded – sweet!&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;em&gt;I love caching and where possible, always enable it.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;hr&gt;  &lt;h2&gt;But What Happens when you change a file?&lt;/h2&gt; &lt;p&gt;&lt;a href="https://normansolutions.co.uk/posts/files/7de72d8e-efac-44fb-9c7d-e5e6e3f8c493.png"&gt;&lt;img title="bob" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="bob" src="https://normansolutions.co.uk/posts/files/69a07192-85fb-4c5c-8bd3-4551d6be261a.png" width="316" height="164"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;So we accept that caching is a good thing.&amp;nbsp; &lt;em&gt;However&lt;/em&gt;, when you &lt;strong&gt;deliberately&lt;/strong&gt; change a file &lt;em&gt;(update your css or JavaScript etc),&lt;/em&gt; of course you &lt;strong&gt;don’t&lt;/strong&gt; want the cached version being served to the end user – and no, &lt;u&gt;it isn’t good enough&lt;/u&gt; to just say ‘&lt;em&gt;&lt;strong&gt;refresh your browser&lt;/strong&gt;&lt;/em&gt;’.&lt;/p&gt; &lt;p&gt;The obvious answer, is to rename your file.&amp;nbsp; But of course, you then have to rename &lt;em&gt;all&lt;/em&gt; references to this file, within your website – not ideal!&lt;/p&gt; &lt;h2&gt;Enter Cache-Busting&lt;/h2&gt; &lt;blockquote&gt; &lt;p&gt;&lt;em&gt;‘&lt;/em&gt;&lt;a href="http://www.youtube.com/watch?v=m9We2XsVZfc" target="_blank"&gt;&lt;em&gt;Who you gonna call…..&lt;/em&gt;&lt;/a&gt;&lt;em&gt;” Ok…don’t worry, I won’t go there, far too cheesy!&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;For a long time, I used Microsoft’s own &lt;a href="http://www.asp.net/mvc/tutorials/mvc-4/bundling-and-minification" target="_blank"&gt;Bundling and Minification&lt;/a&gt; solution, which for the record, I still think is excellent.&amp;nbsp; &lt;em&gt;However&lt;/em&gt;, when it comes to cache-busting, the Microsoft solution, resolves this by appending a unique &lt;a href="http://en.wikipedia.org/wiki/Query_string" target="_blank"&gt;query-string&lt;/a&gt; to the end of the file.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;em&gt;For example: a file called ‘&lt;strong&gt;styles.css&lt;/strong&gt;’ could become ‘&lt;strong&gt;styles?v=r0sLDicvP58AIXN&lt;/strong&gt;’&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;This solutions works well, in the sense that it certainly provides a ‘&lt;em&gt;new’&lt;/em&gt; file name – but on my travels I have subsequently learnt, that the query-string method is &lt;u&gt;not &lt;/u&gt;the best accepted practice for cache-busting, and can &lt;em&gt;fail&lt;/em&gt; under certain circumstances.&lt;/p&gt; &lt;h2&gt;An Alternative Approach&lt;/h2&gt; &lt;p&gt;I use the excellent &lt;a href="https://github.com/madskristensen/miniblog" target="_blank"&gt;MiniBlog&lt;/a&gt; framework for my blog site, and love the way it deals with caching and cache busting &lt;em&gt;(amongst other things).&lt;/em&gt;&lt;/p&gt; &lt;p&gt;MiniBlog &lt;em&gt;(and no doubt others) &lt;/em&gt;take an approach of actually changing the &lt;em&gt;path&lt;/em&gt; as against the filename&lt;em&gt;.&lt;/em&gt;&amp;nbsp; This path is created, based on a time stamp &lt;em&gt;(or specifically, time-ticks)&lt;/em&gt; and is remarkably simple.&amp;nbsp; It’s now my preferred method of cache-busting.&lt;/p&gt; &lt;hr&gt;  &lt;h2&gt;The Steps&lt;/h2&gt; &lt;p&gt;Firstly, you need to create a c# class, that will be responsible for creating the &lt;em&gt;unique new path&lt;/em&gt; to any given file.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;em&gt;In the below example, you may note that this class also allows for the use of a CDN path, in which the cache-bust would not be required.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;&lt;script gitsrc="https://gist.github.com/normansolutions/5600e49943d22e5eb5df.js"&gt;&lt;/script&gt;&lt;noscript&gt;&lt;a href="https://gist.github.com/5600e49943d22e5eb5df"&gt;Click for code snippet&lt;/a&gt;&lt;/noscript&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;em&gt;The key to the unique path creation is the &lt;strong&gt;File.GetLastWriteTime&lt;/strong&gt; syntax – this literally establishes the last time a file was changed, and uses that, as a basis to create a unique numerical value of time-ticks.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Of course, we &lt;em&gt;will&lt;/em&gt; need to somehow establish the &lt;strong&gt;real&lt;/strong&gt; path, as to where the file is located &lt;em&gt;(as against this virtual one);&lt;/em&gt; in short, we need some routing.&lt;/p&gt; &lt;p&gt;This is very easily done, with the below code snippet added to the &lt;a href="http://en.wikipedia.org/wiki/Web.config" target="_blank"&gt;web.config&lt;/a&gt; file – using some &lt;a href="http://en.wikipedia.org/wiki/Regular_expression" target="_blank"&gt;regex&lt;/a&gt; wizardry, this tells incoming requests, that when it comes across one of these &lt;em&gt;‘special paths’&lt;/em&gt;, to route it to the &lt;u&gt;correct&lt;/u&gt; location.&lt;/p&gt; &lt;p&gt;&lt;script gitsrc="https://gist.github.com/normansolutions/3be11b38c60d3a0cc1b8.js"&gt;&lt;/script&gt;&lt;noscript&gt;&lt;a href="https://gist.github.com/3be11b38c60d3a0cc1b8"&gt;Click for code snippet&lt;/a&gt;&lt;/noscript&gt;&lt;/p&gt; &lt;p&gt;Finally, to actually use the cache-busting feature in your page, just path your appropriate links and scripts &lt;em&gt;(css, js etc)&lt;/em&gt; using the below method.&lt;/p&gt; &lt;p&gt;&lt;script gitsrc="https://gist.github.com/normansolutions/0405e7113b5d82eb55c4.js"&gt;&lt;/script&gt;&lt;noscript&gt;&lt;a href="https://gist.github.com/0405e7113b5d82eb55c4"&gt;Click for code snippet&lt;/a&gt;&lt;/noscript&gt;&lt;/p&gt; &lt;hr&gt;  &lt;h2&gt;The Result&lt;/h2&gt; &lt;p&gt;As you can see from the below screen shot, the example css and JavaScript paths are indeed, very &lt;strong&gt;unique!&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://normansolutions.co.uk/posts/files/0a839358-822d-43bf-83aa-906a447eb7b5.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="https://normansolutions.co.uk/posts/files/2005d37a-97fe-43df-a2ea-7854ca5241a5.png" width="339" height="178"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;I have created a &lt;em&gt;very basic &lt;/em&gt;ASP.net website, which you can download from my &lt;a href="https://github.com/normansolutions/CacheBustExample" target="_blank"&gt;GitHub account here&lt;/a&gt;.&amp;nbsp; This example will display a webpage detailing the path to a css file, a JavaScript file and a favicon image.&lt;/p&gt; &lt;p&gt;Making changes to any of the files within the project, will clearly demonstrate a new path on a refresh.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;em&gt;Give it a go - it certainly works for me!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content>
  <ispublished>true</ispublished>
  <categories>
    <category>Website</category>
    <category>Razor</category>
    <category>JavaScript</category>
    <category>CSS</category>
    <category>C#</category>
    <category>Caching</category>
  </categories>
  <comments>
    <comment isAdmin="false" isApproved="false" id="c43c4c75-4f70-4f6c-8627-b771e477a632">
      <author>Nicolas</author>
      <email>ni@ya.com</email>
      <website>http://madskristensen.net/</website>
      <ip>174.141.243.6</ip>
      <userAgent>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.152 Safari/537.36</userAgent>
      <date>2015-05-21 18:19:40</date>
      <content>http://madskristensen.net/post/cache-busting-in-aspnet</content>
    </comment>
  </comments>
</post>