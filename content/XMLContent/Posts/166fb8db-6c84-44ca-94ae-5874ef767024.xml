<?xml version="1.0" encoding="utf-8"?>
<post>
  <title>Tracking devices in UniFi WiFi</title>
  <slug>tracking-devices-in-unifi-wifi</slug>
  <author></author>
  <pubDate>2015-01-02 12:15:14</pubDate>
  <lastModified>2015-01-02 12:15:14</lastModified>
  <content>&lt;p&gt;Several years ago, we migrated from a &lt;a href="http://www.cisco.com/cisco/web/UK/index.html#x6CjTZEDlwuM6WO1.97" target="_blank"&gt;Cisco&lt;/a&gt; Wi-Fi infrastructure to a &lt;a href="http://www.ubnt.com/enterprise/" target="_blank"&gt;UniFi&lt;/a&gt; setup.&lt;/p&gt; &lt;p&gt;UniFi &lt;em&gt;(from Ubiquiti Networks)&lt;/em&gt; offer a pretty remarkable WiFi solution, especially when it comes down to cost.&amp;nbsp; I shan’t go into the in’s and out’s of UniFi, as apart from anything else, I can’t claim to be an expert in the technology.&amp;nbsp; In many ways, it just works!&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;em&gt;What’s interesting, is the database supporting the UniFi controller is &lt;/em&gt;&lt;a href="http://www.mongodb.org/" target="_blank"&gt;&lt;em&gt;MongoDB&lt;/em&gt;&lt;/a&gt;&lt;em&gt; (a &lt;a href="http://en.wikipedia.org/wiki/NoSQL" target="_blank"&gt;NoSQL&lt;/a&gt; database, that can be queried using JavaScript).&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Again, whilst I wouldn’t claim to be a MongoDB expert, I do like the idea of being able to use JavaScript to query data.&lt;/p&gt; &lt;hr&gt;  &lt;h2&gt;Lost iPad&lt;/h2&gt; &lt;p&gt;Recently, we had a situation where an iPad had gone missing.&amp;nbsp; Although it is possible to establish an approximate location of a given device, using UniFi’s controller system, clearly this is only effective whilst the device is connected; the next best option is a singular ‘&lt;strong&gt;last seen&lt;/strong&gt;’ log entry.&lt;/p&gt; &lt;p&gt;So in this particular instance, there wasn’t any &lt;em&gt;real&lt;/em&gt; ‘tracking’ data available to work with.&amp;nbsp; However, UniFi &lt;em&gt;was&lt;/em&gt; logging connection information, so I concluded that there must be a way of &lt;em&gt;extracting&lt;/em&gt; this information from the backend.&lt;/p&gt; &lt;p&gt;The first thing I did was download and install a &lt;a href="http://en.wikipedia.org/wiki/Graphical_user_interface" target="_blank"&gt;GUI&lt;/a&gt; based MongoDB management tool called &lt;a href="http://robomongo.org/" target="_blank"&gt;RoboMongo&lt;/a&gt;&amp;nbsp;&lt;em&gt;(ok I could have consoled my way to success, but the GUI just felt a little easier).&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Installing and configuring RoboMogo is really very easy.&amp;nbsp; In our instance, it was just install and connect to ‘localhost’ using port 27117.&lt;/p&gt; &lt;p&gt;&lt;a href="https://normansolutions.co.uk/posts/files/24606e84-8a7e-4e66-96f3-fc7345f4de47.jpg"&gt;&lt;img title="RoboImg" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="RoboImg" src="https://normansolutions.co.uk/posts/files/5ad78a35-ec47-45d0-b103-2b895beaa52b.jpg" width="244" height="168"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h2&gt;Tracking Script&lt;/h2&gt; &lt;blockquote&gt; &lt;p&gt;&lt;em&gt;Once RoboMongo was installed, it was then a matter of scripting out an appropriate query.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Using the &lt;em&gt;‘&lt;a href="https://normansolutions.co.uk/post/plotting-earthquakes-on-a-firefly-vle-page" target="_blank"&gt;beg, borrow and manipulate&lt;/a&gt;’&lt;/em&gt; principle – I ended up with an effective script.&lt;/p&gt; &lt;p&gt;The script takes two parameters – a &lt;strong&gt;device ID&lt;/strong&gt; &lt;em&gt;(which is a wildcard by default)&lt;/em&gt; and the total number of &lt;strong&gt;hours &lt;/strong&gt;that you wish to search back.&lt;/p&gt; &lt;p&gt;It produces a list of results, detailing the device &lt;em&gt;(or devices&lt;/em&gt;), along with every AP the device(s) has connected to, complete with the time at this location; all going back for as long you declared in hours &lt;em&gt;(or have enough data to search).&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;script gitsrc="https://gist.github.com/normansolutions/31d23709dfe158c8d000.js"&gt;&lt;/script&gt;&lt;noscript&gt;&lt;a href="https://gist.github.com/31d23709dfe158c8d000"&gt;Click for code snippet&lt;/a&gt;&lt;/noscript&gt; &lt;/p&gt; &lt;hr&gt;  &lt;h2&gt;Result&lt;/h2&gt; &lt;p&gt;In our particular instance, the results were astonishing; we could trace a complete history of the device’s journey &lt;em&gt;(even though it was no longer turned on).&lt;/em&gt;&lt;/p&gt; &lt;p&gt;I am also very happy to report that the device in question, was found safe and well.&lt;/p&gt;</content>
  <ispublished>true</ispublished>
  <categories>
    <category>JavaScript</category>
    <category>DevOps</category>
    <category>SysAdmin</category>
    <category>UniFi</category>
  </categories>
  <comments></comments>
</post>