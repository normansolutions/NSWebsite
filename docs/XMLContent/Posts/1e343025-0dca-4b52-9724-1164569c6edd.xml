<?xml version="1.0" encoding="utf-8"?>
<post>
  <title>Secure a webpage without a logon?</title>
  <slug>secure-a-webpage-without-a-logon</slug>
  <author></author>
  <pubDate>2015-09-19 12:58:34</pubDate>
  <lastModified>2015-09-19 12:58:34</lastModified>
  <content>&lt;p&gt;Secure access to a webpage, without the need for a logon, can often be viewed as a bit of a holy grail solution.&lt;/p&gt; &lt;p&gt;Recently, I introduced a frictionless &lt;em&gt;(logon free) &lt;/em&gt;way of providing &lt;em&gt;secure(ish)&lt;/em&gt; access to some very basic web services.&lt;/p&gt; &lt;p&gt;&lt;em&gt;….I can hear all those security experts screaming already!&lt;/em&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;em&gt;Before I proceed any further, please note that this solution &lt;strong&gt;must never be seen as a proper security authentication replacement!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;What this can be viewed as, is an ideal solution for those ‘&lt;em&gt;edge’&lt;/em&gt; cases, where you may have a website, that &lt;strong&gt;isn’t&lt;/strong&gt; specifically data sensitive, yet requires private access.&lt;/p&gt; &lt;p&gt;An ideal candidate could be an administration page for entering dates or events onto a basic website.&lt;/p&gt; &lt;hr&gt;  &lt;h2&gt;Security by Obscurity&lt;/h2&gt; &lt;p&gt;In many ways, this solution does follow the &lt;a href="https://en.wikipedia.org/wiki/Security_through_obscurity" target="_blank"&gt;Security by Obscurity&lt;/a&gt; model, &lt;strong&gt;but&lt;/strong&gt; with the crucial addition of an extra layer!&lt;/p&gt; &lt;p&gt;A lot of web services nowadays are using the ‘complex url’ pattern of keeping a resource public, yet almost impossible to guess &lt;em&gt;(for instance, some ways of sharing documents on Microsoft &lt;/em&gt;&lt;a href="https://onedrive.live.com/about/en-gb/" target="_blank"&gt;&lt;em&gt;Oncedrive&lt;/em&gt;&lt;/a&gt; &lt;em&gt;etc).&lt;/em&gt;&lt;/p&gt; &lt;p&gt;To clarify, this is where the web address contains random characters (often appended to the end of the url), which mean absolutely nothing to the end user, but are actually a unique resource code.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Complex URL forms the first part of this implementation.&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Create a ‘key’ which is appended to a &lt;a href="https://en.wikipedia.org/wiki/Query_string" target="_blank"&gt;query string&lt;/a&gt;.  &lt;li&gt;Check the query string being sent to the server, on page request, to establish whether or not to display the resource.&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;Very basic, yet surprisingly secure(ish).&lt;/p&gt; &lt;p&gt;Of course, the main concern with this solution, is that whilst the web address may not be guessable, it is certainly shareable!&lt;/p&gt; &lt;h2&gt;Enter Secure Cookies&lt;/h2&gt; &lt;p&gt;The crucial secondary level to this solution, is to ensure a secure cookie is present on each device you are allowing to access this web resource.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;No cookie – No access&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Again, a simple principle, but surprisingly secure – indeed, let us not forget, that secure http cookies are pretty much what governs conventional web authentication processes anyway!&lt;/p&gt; &lt;p&gt;Of course throw it all onto port 443 (https) and you extend the security even further.&lt;/p&gt; &lt;hr&gt;  &lt;h2&gt;The Code!&lt;/h2&gt; &lt;p&gt;Below is an example of how this very basic process can be implemented in asp.net (c#).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Adding cookie to the device &lt;em&gt;(also providing the ability to remove)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;script src="https://gist.github.com/normansolutions/d7d28220fc03f03ce345.js"&gt;&lt;/script&gt;&lt;noscript&gt;&lt;a href="https://gist.github.com/d7d28220fc03f03ce345"&gt;Click for code snippet&lt;/a&gt;&lt;/noscript&gt; &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Storing the complex query string in a web.config for easy maintenance&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;script src="https://gist.github.com/normansolutions/3740c5c29c3d637a51c0.js"&gt;&lt;/script&gt;&lt;noscript&gt;&lt;a href="https://gist.github.com/3740c5c29c3d637a51c0"&gt;Click for code snippet&lt;/a&gt;&lt;/noscript&gt; &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Server side checking that cookie is present and query string matches&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;script src="https://gist.github.com/normansolutions/6c84c627ea9502e753eb.js"&gt;&lt;/script&gt;&lt;noscript&gt;&lt;a href="https://gist.github.com/6c84c627ea9502e753eb"&gt;Click for code snippet&lt;/a&gt;&lt;/noscript&gt; &lt;/p&gt; &lt;hr&gt;  &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;I have used this approach on several basic web solutions, that &lt;em&gt;don’t&lt;/em&gt; require armour plating security, but equally shouldn't ideally be exposed to all and sundry.&lt;/p&gt; &lt;p&gt;My recommendation, would be to use this on internal sites &lt;em&gt;(behind the firewall)&lt;/em&gt; or small public sites.&amp;nbsp; It makes life remarkably simple for updating basic content, without having to implement a full authentication system.&lt;/p&gt; &lt;p&gt;Indeed, one &lt;em&gt;could&lt;/em&gt; argue that this is &lt;strong&gt;even more secure&lt;/strong&gt; than some conventional username and password systems – &lt;em&gt;especially&lt;/em&gt; when you often see the ridiculously hackable passwords that some end users use!&lt;/p&gt; &lt;p&gt;Of course, it doesn't particularly scale well, and will cause slight annoyance if you clear down your cookies; but then again, it is only intended for quick solution, niche requirements.&lt;/p&gt;</content>
  <ispublished>true</ispublished>
  <categories>
    <category>C#</category>
    <category>Razor</category>
    <category>Website</category>
    <category>Security</category>
  </categories>
  <comments></comments>
</post>